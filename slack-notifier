#!/usr/bin/env python
# -*- coding: utf-8 -*-

import ConfigParser
import argparse
import json
import os
import subprocess
import urllib2

VERSION = '1.0.2'

parser = argparse.ArgumentParser(
    prog='Slack Notifier',
    description='Send formatted message to Slack with version and changelog')

parser.add_argument('-n', '--name', type=str, help='project name', required=True)
parser.add_argument('-r', '--revision', type=str, help='release revision', required=True)
parser.add_argument('-p', '--path', type=str, help='path to release', default=os.getcwd())
parser.add_argument('-c', '--config', type=str, help='config file', default='~/.slack-notifier.cfg')
parser.add_argument('-d', '--dry', action='store_true', help='dry run')
parser.add_argument('-v', '--verbose', action='count', help='verbosity')
parser.add_argument('-V', '--version', action='version', version='%(prog)s {}'.format(VERSION))
parser.add_argument('webhook', type=str, help='Slack Incoming Webhook')

args = parser.parse_args()

config_file = os.path.expanduser(args.config)
if args.verbose > 0:
    print 'config file: {}'.format(config_file)

release_path = os.path.abspath(args.path)

config = ConfigParser.SafeConfigParser()
config.read(config_file)

if config.has_option(args.name, 'latest_revision'):
    previous_revision = config.get(args.name, 'latest_revision')
else:
    previous_revision = ''

if args.verbose > 0:
    print 'previous_revision: {}'.format(previous_revision)

package_json = json.load(open(os.path.join(release_path, 'package.json'), 'r'))
release_revision = args.revision
release_version = '{}+{}'.format(package_json['version'], release_revision[:7])

git_log = [
    'git',
    'log',
    '--date-order',
    '--no-merges',
    '--date=short',
    '--pretty=format:%cd: %s (%h)'
]

if not previous_revision:
    git_log.append('-n 5')
    git_log.append(release_revision)
elif previous_revision == release_revision:
    git_log.append('-n 1')
    git_log.append(release_revision)
else:
    git_log.append('{}..{}'.format(previous_revision, release_revision))

changelog = subprocess.check_output(git_log, cwd=release_path)

if args.verbose > 0:
    print 'release path: {}'.format(release_path)
    print 'release version: {}'.format(release_version)
    print 'changelog: {}'.format(changelog.splitlines())

payload = {
    'username': 'Slack Notifier',
    'icon_emoji': ':rocket:',
    'mrkdwn': True,
    'attachments': [{
        'pretext': 'Deployed version *{}*'.format(release_version),
        'text': changelog,
        'mrkdwn_in': [
            'text',
            'pretext'
        ]
    }]
}

req = urllib2.Request(args.webhook)
req.add_header('Content-Type', 'application/json')
req.add_data(json.dumps(payload, ensure_ascii=False))

if args.verbose > 0:
    print '{} {}\n{}'.format(req.get_method(), req.get_full_url(), req.get_data())

if args.dry:
    slack_response = ''
else:
    response = urllib2.urlopen(req)
    slack_response = response.read()

print slack_response

if not config.has_section(args.name):
    config.add_section(args.name)

config.set(args.name, 'latest_revision', release_revision)
config.set(args.name, 'slack_response', slack_response)
config.write(open(config_file, 'w'))
